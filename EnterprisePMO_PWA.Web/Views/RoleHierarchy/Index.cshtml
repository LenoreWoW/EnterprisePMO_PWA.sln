@model List<EnterprisePMO_PWA.Domain.Entities.Role>
@{
    ViewData["Title"] = "Role Hierarchy";
    Layout = "~/Views/Shared/_TailwindLayout.cshtml";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <div class="md:flex md:items-center md:justify-between mb-6">
        <div class="flex-1 min-w-0">
            <h1 class="text-2xl font-bold leading-7 text-gray-900 sm:truncate">
                Role Hierarchy
            </h1>
        </div>
        <div class="mt-4 flex md:mt-0 md:ml-4">
            <a permission="ManageRoles" href="@Url.Action("Index", "RoleManagement")" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Manage Roles
            </a>
        </div>
    </div>

    <div class="bg-white shadow-sm rounded-lg mb-6">
        <div class="px-4 py-5 sm:p-6">
            <h2 class="text-lg font-medium text-gray-900">Discord-inspired Hierarchical System</h2>
            <p class="mt-2 text-sm text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
                Our system uses a Discord-inspired hierarchical role system. 
                Roles with higher levels have more permissions and can manage roles below them in the hierarchy.
                Each role can inherit permissions from roles below it.
            </p>
            
            @await Component.InvokeAsync("RoleHierarchyVisualizer")
        </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var role in Model)
        {
            <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="px-4 py-5 sm:px-6 bg-gray-50 flex justify-between items-center">
                    <h3 class="text-lg font-medium text-gray-900">@role.RoleName</h3>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        Level @role.HierarchyLevel
                    </span>
                </div>
                <div class="px-4 py-5 sm:p-6">
                    <p class="text-sm text-gray-500 mb-4">@role.Description</p>
                    
                    <div class="border-t border-gray-200 pt-4">
                        @await Component.InvokeAsync("RolePermissions", new { role = role })
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-tooltip]');
            
            // If using custom Tailwind tooltips
            tooltipTriggerList.forEach(el => {
                el.addEventListener('mouseenter', () => {
                    const tooltip = document.createElement('div');
                    tooltip.className = 'absolute z-10 px-3 py-2 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm -mt-8';
                    tooltip.textContent = el.getAttribute('data-tooltip');
                    el.appendChild(tooltip);
                });
                
                el.addEventListener('mouseleave', () => {
                    const tooltip = el.querySelector('div');
                    if (tooltip) tooltip.remove();
                });
            });
        });
    </script>
}