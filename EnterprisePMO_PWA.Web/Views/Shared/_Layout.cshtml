<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - EnterprisePMO</title>
    <!-- Use CDN if local files not available -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="manifest" href="~/manifest.json" />
</head>
<body data-authenticated="@User.Identity?.IsAuthenticated.ToString().ToLower()">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm">
            <div class="container-fluid">
                <a class="navbar-brand d-flex align-items-center" asp-area="" asp-controller="Dashboard" asp-action="Index">
                    <i class="bi bi-kanban me-2 text-primary"></i>
                    <span>EnterprisePMO</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-lg-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <li class="nav-item">
                                <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Dashboard" ? "active" : "")" 
                                   asp-controller="Dashboard" asp-action="Index">
                                   <i class="bi bi-speedometer2 me-1"></i>Dashboard
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Project" ? "active" : "")" 
                                   asp-controller="Project" asp-action="List">
                                   <i class="bi bi-folder me-1"></i>Projects
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Kanban" ? "active" : "")" 
                                   asp-controller="Kanban" asp-action="Index">
                                   <i class="bi bi-kanban me-1"></i>Tasks
                                </a>
                            </li>
                            @if (User.IsInRole("Admin") || User.IsInRole("MainPMO") || User.IsInRole("SubPMO"))
                            {
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="reportsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-graph-up me-1"></i>Reports
                                    </a>
                                    <ul class="dropdown-menu shadow-sm border-0" aria-labelledby="reportsDropdown">
                                        <li><a class="dropdown-item" href="/Reports/ProjectReport"><i class="bi bi-file-earmark-text me-2"></i>Project Reports</a></li>
                                        <li><a class="dropdown-item" href="/Reports/DepartmentPerformance"><i class="bi bi-pie-chart me-2"></i>Department Performance</a></li>
                                        <li><a class="dropdown-item" href="/Reports/GoalAlignment"><i class="bi bi-bullseye me-2"></i>Goal Alignment</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="/Reports/Custom"><i class="bi bi-pencil-square me-2"></i>Custom Reports</a></li>
                                    </ul>
                                </li>
                            }
                            @if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-gear me-1"></i>Administration
                                    </a>
                                    <ul class="dropdown-menu shadow-sm border-0" aria-labelledby="adminDropdown">
                                        <li><a class="dropdown-item" href="/UserManagement/Index"><i class="bi bi-people me-2"></i>User Management</a></li>
                                        <li><a class="dropdown-item" href="/RoleManagement/Index"><i class="bi bi-shield-lock me-2"></i>Role Management</a></li>
                                        <li><a class="dropdown-item" href="/Department/List"><i class="bi bi-building me-2"></i>Departments</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="/AuditLogs/Index"><i class="bi bi-journal-text me-2"></i>Audit Logs</a></li>
                                        <li><a class="dropdown-item" href="/Settings/Index"><i class="bi bi-sliders me-2"></i>System Settings</a></li>
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                    <div class="d-flex align-items-center">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <div class="dropdown me-3">
                                <a class="btn btn-link position-relative p-0 text-dark" href="#" role="button" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-bell fs-5"></i>
                                    <span id="notificationCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">
                                        0
                                    </span>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end notification-dropdown p-0 shadow-sm border-0" aria-labelledby="notificationDropdown">
                                    <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
                                        <h6 class="mb-0">Notifications</h6>
                                        <a href="#" class="text-primary small">Mark all as read</a>
                                    </div>
                                    <div id="notificationList" class="overflow-auto" style="max-height: 300px;">
                                        <div class="p-3 text-center text-muted">
                                            <i class="bi bi-bell-slash"></i><br />
                                            No new notifications
                                        </div>
                                    </div>
                                    <div class="p-2 border-top text-center">
                                        <a href="#" class="btn btn-sm btn-light w-100">View All</a>
                                    </div>
                                </div>
                            </div>
                            <div class="dropdown">
                                <a class="btn btn-link dropdown-toggle text-dark d-flex align-items-center" href="#" role="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 32px; height: 32px; font-size: 0.875rem;">
                                        @(User.Identity?.Name != null ? User.Identity.Name.Substring(0, 1).ToUpper() : "U")
                                    </div>
                                    <span class="d-none d-md-inline-block">@User.Identity?.Name?.Split('@').FirstOrDefault()</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0" aria-labelledby="userDropdown">
                                    <li class="px-3 py-2 text-muted small">Signed in as <strong>@User.Identity?.Name</strong></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="/Account/Profile"><i class="bi bi-person me-2"></i>Profile</a></li>
                                    <li><a class="dropdown-item" href="/Account/Settings"><i class="bi bi-gear me-2"></i>Settings</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form asp-controller="Account" asp-action="Logout" method="post">
                                            <button type="submit" class="dropdown-item text-danger">
                                                <i class="bi bi-box-arrow-right me-2"></i>Logout
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </div>
                        }
                        else
                        {
                            <a class="btn btn-outline-primary me-2" asp-controller="Account" asp-action="Login">Login</a>
                            <a class="btn btn-primary" asp-controller="Account" asp-action="Signup">Sign Up</a>
                        }
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="container-fluid py-4">
        <main role="main">
            @RenderBody()
        </main>
    </div>

    <footer class="footer border-top py-4 mt-4 bg-white">
        <div class="container">
            <div class="row">
                <div class="col-md-6 text-center text-md-start">
                    <span>&copy; @DateTime.Now.Year - EnterprisePMO</span>
                </div>
                <div class="col-md-6 text-center text-md-end">
                    <a asp-area="" asp-controller="Home" asp-action="Privacy" class="text-dark me-3">Privacy</a>
                    <a asp-area="" asp-controller="Home" asp-action="Terms" class="text-dark">Terms</a>
                </div>
            </div>
        </div>
    </footer>

    <!-- Use CDN if local files not available -->
    <script src="https://code.jquery.com/jquery-3.6.3.min.js" integrity="sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Toast container for notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>
    
    @await RenderSectionAsync("Scripts", required: false)
    
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Check for active nav items
            const currentPath = window.location.pathname;
            document.querySelectorAll('.navbar-nav .nav-link').forEach(link => {
                const linkPath = link.getAttribute('href');
                if (linkPath && currentPath.startsWith(linkPath) && linkPath !== '/') {
                    link.classList.add('active');
                }
            });
            
            // Initialize notification checking
            if (document.body.dataset.authenticated === 'true') {
                checkNotifications();
                // Check for new notifications every minute
                setInterval(checkNotifications, 60000);
            }
        });
        
        // Function to check for notifications
        function checkNotifications() {
            fetch('/api/notifications/unread')
                .then(response => response.json())
                .then(data => {
                    const notificationCount = document.getElementById('notificationCount');
                    const notificationList = document.getElementById('notificationList');
                    
                    if (data.notifications && data.notifications.length > 0) {
                        // Update count badge
                        notificationCount.textContent = data.notifications.length;
                        notificationCount.classList.remove('d-none');
                        
                        // Update notification list
                        notificationList.innerHTML = '';
                        
                        data.notifications.forEach(notification => {
                            const notificationItem = document.createElement('div');
                            notificationItem.className = 'notification-item p-3 border-bottom';
                            notificationItem.innerHTML = `
                                <div class="d-flex">
                                    <div class="notification-icon me-3">
                                        <i class="bi bi-${getNotificationIcon(notification.type)} text-${getNotificationColor(notification.type)}"></i>
                                    </div>
                                    <div class="notification-content">
                                        <div class="notification-text">${notification.message}</div>
                                        <small class="notification-time text-muted">${formatNotificationTime(notification.created)}</small>
                                    </div>
                                </div>
                            `;
                            notificationList.appendChild(notificationItem);
                        });
                    } else {
                        // No notifications
                        notificationCount.classList.add('d-none');
                        notificationList.innerHTML = `
                            <div class="p-3 text-center text-muted">
                                <i class="bi bi-bell-slash"></i><br />
                                No new notifications
                            </div>
                        `;
                    }
                })
                .catch(error => console.error('Error checking notifications:', error));
        }
        
        // Helper functions for notifications
        function getNotificationIcon(type) {
            switch (type) {
                case 'approval': return 'check-circle';
                case 'rejection': return 'x-circle';
                case 'update': return 'arrow-clockwise';
                case 'alert': return 'exclamation-triangle';
                default: return 'bell';
            }
        }
        
        function getNotificationColor(type) {
            switch (type) {
                case 'approval': return 'success';
                case 'rejection': return 'danger';
                case 'update': return 'info';
                case 'alert': return 'warning';
                default: return 'primary';
            }
        }
        
        function formatNotificationTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffMs = now - date;
            const diffSec = Math.round(diffMs / 1000);
            const diffMin = Math.round(diffSec / 60);
            const diffHour = Math.round(diffMin / 60);
            const diffDay = Math.round(diffHour / 24);
            
            if (diffSec < 60) return 'Just now';
            if (diffMin < 60) return `${diffMin} minute${diffMin !== 1 ? 's' : ''} ago`;
            if (diffHour < 24) return `${diffHour} hour${diffHour !== 1 ? 's' : ''} ago`;
            if (diffDay < 7) return `${diffDay} day${diffDay !== 1 ? 's' : ''} ago`;
            
            return date.toLocaleDateString();
        }
    </script>
</body>
</html>