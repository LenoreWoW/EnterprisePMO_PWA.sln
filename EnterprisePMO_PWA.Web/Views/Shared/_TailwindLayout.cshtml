<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Enterprise PMO</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <!-- Bootstrap Icons (for compatibility) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <!-- Alpine.js -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <style>
        [x-cloak] { display: none !important; }
        
        /* Hide nav items by default until auth is confirmed */
        .nav-auth-item {
            display: none;
        }
        
        body[data-authenticated="true"] .nav-auth-item {
            display: flex;
        }
        
        body[data-authenticated="true"] .nav-no-auth-item {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen" data-authenticated="false">
    <!-- Navbar -->
    <nav class="bg-blue-800 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex">
                    <div class="flex-shrink-0 flex items-center">
                        <a href="/" class="text-xl font-bold">Enterprise PMO</a>
                    </div>
                    <div class="hidden md:ml-6 md:flex md:space-x-8 nav-auth-item">
                        <a href="/Dashboard" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-white hover:border-white" data-requires-auth="true">
                            <i class="fas fa-tachometer-alt mr-1"></i> Dashboard
                        </a>
                        <a href="/Project/List" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-white hover:border-white" data-requires-auth="true">
                            <i class="fas fa-project-diagram mr-1"></i> Projects
                        </a>
                        <a href="/UserManagement" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-white hover:border-white admin-only" data-requires-auth="true">
                            <i class="fas fa-users mr-1"></i> Users
                        </a>
                        <a href="/api/auditlogs/recent" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-white hover:border-white admin-only" data-requires-auth="true">
                            <i class="fas fa-history mr-1"></i> Audit Logs
                        </a>
                        <a href="/RoleHierarchy" class="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-white hover:border-white admin-only" data-requires-auth="true">
                            <i class="fas fa-sitemap mr-1"></i> Roles
                        </a>
                    </div>
                </div>
                <div class="flex items-center">
                    <!-- Login/Signup buttons for non-authenticated users -->
                    <div class="auth-buttons nav-no-auth-item">
                        <a href="/Account/Login" class="text-white hover:bg-blue-700 px-3 py-2 rounded-md text-sm font-medium">Log in</a>
                        <a href="/Account/Signup" class="ml-2 bg-white text-blue-800 hover:bg-gray-100 px-3 py-2 rounded-md text-sm font-medium">Sign up</a>
                    </div>
                    
                    <!-- User menu for authenticated users -->
                    <div class="hidden md:ml-4 md:flex-shrink-0 md:flex md:items-center profile-menu nav-auth-item" style="display: none;">
                        <!-- Notifications -->
                        <div x-data="{ notificationsOpen: false, unreadCount: 0 }" class="ml-3 relative">
                            <button x-on:click="notificationsOpen = !notificationsOpen" class="p-1 rounded-full text-white hover:text-gray-200 focus:outline-none">
                                <span class="sr-only">View notifications</span>
                                <i class="fas fa-bell text-lg"></i>
                                <span x-show="unreadCount > 0" x-text="unreadCount" class="absolute top-0 right-0 -mt-1 -mr-1 inline-flex items-center justify-center px-2 py-1 text-xs leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full"></span>
                            </button>
                            <div x-show="notificationsOpen" x-on:click.away="notificationsOpen = false" x-cloak
                                class="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                                <div class="py-1">
                                    <div class="px-4 py-2 border-b">
                                        <div class="flex justify-between items-center">
                                            <h3 class="text-sm font-medium text-gray-900">Notifications</h3>
                                            <button x-on:click="markAllAsRead()" class="text-xs text-blue-600 hover:text-blue-800">Mark all as read</button>
                                        </div>
                                    </div>
                                    <div id="notifications-container" class="max-h-60 overflow-y-auto">
                                        <div class="px-4 py-2 text-center text-sm text-gray-500">
                                            Loading notifications...
                                        </div>
                                    </div>
                                    <div class="border-t">
                                        <a href="/notifications" class="block w-full px-4 py-2 text-xs text-center text-blue-600 hover:text-blue-800">
                                            View all notifications
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Profile dropdown -->
                        <div x-data="{ open: false }" class="ml-3 relative">
                            <div>
                                <button x-on:click="open = !open" class="p-1 rounded-full text-white hover:text-gray-200 focus:outline-none">
                                    <span class="sr-only">Open user menu</span>
                                    <i class="fas fa-user-circle text-2xl"></i>
                                </button>
                            </div>
                            <div x-show="open" x-on:click.away="open = false" x-cloak
                                class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                                <div class="px-4 py-2 text-sm text-gray-500 border-b">
                                    Signed in as <span class="font-semibold text-gray-700 current-username">User</span>
                                </div>
                                <a href="/Account/Profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-user-cog mr-2"></i> Your Profile
                                </a>
                                <a href="/Account/Settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-cog mr-2"></i> Settings
                                </a>
                                <form id="logoutForm" action="/api/auth/logout" method="post" class="border-t">
                                    <button type="submit" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                        <i class="fas fa-sign-out-alt mr-2"></i> Sign out
                                    </button>
                                </form>
                            </div>
                        </div>
                        
                        <!-- Mobile menu button -->
                        <div class="md:hidden -mr-2 flex items-center">
                            <button type="button" id="mobile-menu-button" class="inline-flex items-center justify-center p-2 rounded-md text-white hover:text-gray-100 hover:bg-blue-700 focus:outline-none">
                                <span class="sr-only">Open main menu</span>
                                <i class="fas fa-bars text-lg"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Mobile menu, show/hide based on menu state -->
        <div id="mobile-menu" class="md:hidden hidden bg-blue-700 nav-auth-item">
            <div class="px-2 pt-2 pb-3 space-y-1">
                <a href="/Dashboard" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium" data-requires-auth="true">
                    <i class="fas fa-tachometer-alt mr-1"></i> Dashboard
                </a>
                <a href="/Project/List" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium" data-requires-auth="true">
                    <i class="fas fa-project-diagram mr-1"></i> Projects
                </a>
                <a href="/UserManagement" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium admin-only" data-requires-auth="true">
                    <i class="fas fa-users mr-1"></i> Users
                </a>
                <a href="/api/auditlogs/recent" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium admin-only" data-requires-auth="true">
                    <i class="fas fa-history mr-1"></i> Audit Logs
                </a>
                <a href="/RoleHierarchy" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium admin-only" data-requires-auth="true">
                    <i class="fas fa-sitemap mr-1"></i> Roles
                </a>
                <div class="border-t border-blue-800 pt-2">
                    <a href="/Account/Profile" class="text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium">
                        <i class="fas fa-user-cog mr-2"></i> Your Profile
                    </a>
                    <form id="mobileLogoutForm" action="/api/auth/logout" method="post">
                        <button type="submit" class="w-full text-left text-white hover:bg-blue-600 block px-3 py-2 rounded-md text-base font-medium">
                            <i class="fas fa-sign-out-alt mr-2"></i> Sign out
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </nav>

    <!-- Page header with breadcrumbs -->
    <header class="bg-white shadow">
        <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between">
                <h1 class="text-xl font-bold text-gray-900">@ViewData["Title"]</h1>
                @if (ViewBag.User != null)
                {
                    <div class="text-sm text-gray-600">
                        <span class="font-medium">@ViewBag.User?.Username</span> | 
                        <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium">@ViewBag.User?.Role</span>
                        @if (!string.IsNullOrEmpty(ViewBag.User?.Department))
                        {
                            <span>| @ViewBag.User?.Department</span>
                        }
                    </div>
                }
            </div>
        </div>
    </header>

    <!-- Main content -->
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        @RenderBody()
    </main>

    <!-- Footer -->
    <footer class="bg-white border-t border-gray-200 mt-10">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="text-gray-500 text-sm">
                    &copy; @DateTime.Now.Year - Enterprise PMO Platform
                </div>
                <div class="text-gray-500 text-sm">
                    <a href="/Home/Privacy" class="hover:text-gray-700">Privacy</a> | 
                    <a href="/Home/Terms" class="hover:text-gray-700">Terms</a>
                </div>
            </div>
        </div>
    </footer>

    <!-- Auth.js script -->
    <script src="~/js/auth.js" asp-append-version="true"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // Mobile menu toggle
        document.addEventListener('DOMContentLoaded', function() {
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            if (mobileMenuButton) {
                mobileMenuButton.addEventListener('click', function() {
                    const mobileMenu = document.getElementById('mobile-menu');
                    mobileMenu.classList.toggle('hidden');
                });
            }
            
            // Initialize auth state
            if (window.authManager) {
                // Initialize the auth UI based on token
                window.authManager.updateAuthUI(window.authManager.isAuthenticated());
                
                // Add auth token to all links with data-requires-auth
                if (window.authManager.isAuthenticated()) {
                    const authLinks = document.querySelectorAll('[data-requires-auth="true"]');
                    const token = window.authManager.getToken();
                    
                    if (authLinks.length && token) {
                        authLinks.forEach(link => {
                            if (!link.href.includes('auth_token=')) {
                                const url = new URL(link.href, window.location.origin);
                                url.searchParams.set('auth_token', token);
                                link.href = url.toString();
                            }
                        });
                    }
                    
                    // Show/hide admin items based on user role
                    const currentUser = window.authManager.getCurrentUser();
                    if (currentUser && (currentUser.role === "Admin" || currentUser.role === "MainPMO")) {
                        document.querySelectorAll('.admin-only').forEach(el => {
                            el.style.display = '';
                        });
                    } else {
                        document.querySelectorAll('.admin-only').forEach(el => {
                            el.style.display = 'none';
                        });
                    }
                }
            }
        });
        
        // Notifications handling
        document.addEventListener('DOMContentLoaded', function() {
            // Only run for authenticated users
            if (!document.querySelector('[id^="logoutForm"]') || !window.authManager || !window.authManager.isAuthenticated()) return;
            
            let notificationsData = [];
            
            // Alpine.js store for notifications
            document.addEventListener('alpine:init', () => {
                Alpine.store('notifications', {
                    unreadCount: 0,
                    items: []
                });
            });
            
            // Fetch notifications initially
            fetchNotifications();
            
            // Refresh notifications every 30 seconds
            setInterval(fetchNotifications, 30000);
            
            function fetchNotifications() {
                const token = window.authManager ? window.authManager.getToken() : null;
                if (!token) return;
                
                fetch('/api/notifications/unread', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch notifications');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        notificationsData = data.data;
                        updateNotificationsUI(notificationsData);
                        
                        // Update unread count in Alpine.js store
                        if (typeof Alpine !== 'undefined' && Alpine.store) {
                            Alpine.store('notifications').unreadCount = notificationsData.length;
                            Alpine.store('notifications').items = notificationsData;
                        }
                    }
                })
                .catch(error => console.error('Error fetching notifications:', error));
            }
            
            function updateNotificationsUI(notifications) {
                const container = document.getElementById('notifications-container');
                if (!container) return;
                
                if (!notifications || notifications.length === 0) {
                    container.innerHTML = `
                        <div class="px-4 py-2 text-center text-sm text-gray-500">
                            No notifications at this time
                        </div>
                    `;
                    return;
                }
                
                let html = '';
                notifications.forEach(notification => {
                    html += `
                        <div class="px-4 py-3 hover:bg-gray-50 border-b border-gray-100">
                            <div class="flex">
                                <div class="flex-1">
                                    <p class="text-sm text-gray-800">${notification.message}</p>
                                    <p class="text-xs text-gray-500">${formatDate(notification.createdAt)}</p>
                                </div>
                                <button data-id="${notification.id}" class="mark-read text-xs text-blue-600 hover:text-blue-800">
                                    Mark as read
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                container.innerHTML = html;
                
                // Add event listeners for mark as read buttons
                container.querySelectorAll('.mark-read').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        const id = this.getAttribute('data-id');
                        markAsRead(id);
                    });
                });
            }
            
            function markAsRead(id) {
                const token = window.authManager ? window.authManager.getToken() : null;
                if (!token) return;
                
                fetch(`/api/notifications/${id}/read`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to mark notification as read');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        fetchNotifications();
                    }
                })
                .catch(error => console.error('Error marking notification as read:', error));
            }
            
            // Called from Alpine component
            window.markAllAsRead = function() {
                const token = window.authManager ? window.authManager.getToken() : null;
                if (!token) return;
                
                fetch('/api/notifications/mark-all-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to mark all notifications as read');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        fetchNotifications();
                    }
                })
                .catch(error => console.error('Error marking all notifications as read:', error));
            }
            
            // Format date for notifications
            function formatDate(dateStr) {
                const date = new Date(dateStr);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);
                const diffHours = Math.floor(diffMs / 3600000);
                const diffDays = Math.floor(diffMs / 86400000);
                
                if (diffMins < 1) {
                    return 'Just now';
                } else if (diffMins < 60) {
                    return `${diffMins} minute${diffMins === 1 ? '' : 's'} ago`;
                } else if (diffHours < 24) {
                    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;
                } else if (diffDays < 7) {
                    return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;
                } else {
                    return date.toLocaleDateString();
                }
            }
            
            // Logout form handling with auth token
            document.querySelectorAll('[id^="logoutForm"]').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const token = window.authManager ? window.authManager.getToken() : null;
                    
                    fetch('/api/auth/logout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': token ? `Bearer ${token}` : ''
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Always clear token regardless of response
                        if (window.authManager) {
                            window.authManager.clearToken();
                        } else {
                            localStorage.removeItem('token');
                            localStorage.removeItem('user');
                        }
                        window.location.href = '/Account/Login';
                    })
                    .catch(error => {
                        console.error('Logout error:', error);
                        // Force logout anyway
                        if (window.authManager) {
                            window.authManager.clearToken();
                        } else {
                            localStorage.removeItem('token');
                            localStorage.removeItem('user');
                        }
                        window.location.href = '/Account/Login';
                    });
                });
            });
        });
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>