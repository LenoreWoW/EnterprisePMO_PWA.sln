@{
    ViewData["Title"] = "Workflow Test Page";
    Layout = "_Layout";
}

<div class="container mx-auto px-4 py-8">
    <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-6">
        <div class="bg-blue-600 text-white px-6 py-4">
            <h2 class="text-xl font-bold mb-0">Project Workflow Test</h2>
        </div>
        <div class="p-6">
            <p class="mb-4">This page helps you test the project workflow and notification system. Follow these steps:</p>
            
            <ol class="list-decimal list-inside space-y-1 mb-6 pl-4">
                <li>Create a test project environment</li>
                <li>Test the full approval workflow</li>
                <li>Test the rejection workflow</li>
                <li>View notifications</li>
            </ol>
            
            <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
                <strong class="text-blue-800">Note:</strong>
                <span class="text-blue-700"> The test controller will create test data in your database and run through the workflow steps automatically.</span>
            </div>
            
            <div class="mb-8">
                <h4 class="text-lg font-medium mb-3">1. Create Test Environment</h4>
                <button id="setupTestBtn" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Setup Test Environment
                </button>
                <div id="setupResult" class="mt-3 hidden">
                    <div class="bg-green-50 border-l-4 border-green-400 p-4">
                        <h5 class="font-medium text-green-800">Test Setup Completed</h5>
                        <p id="setupMessage" class="text-green-700"></p>
                        <div id="setupData" class="mt-2"></div>
                    </div>
                </div>
            </div>
            
            <div class="mb-8">
                <h4 class="text-lg font-medium mb-3">2. Run Complete Workflow Test</h4>
                <div class="flex flex-col sm:flex-row gap-2 mb-3 max-w-2xl">
                    <div class="flex-grow flex rounded-md shadow-sm">
                        <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                            Project ID:
                        </span>
                        <input type="text" id="projectIdInput" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter the Project ID from step 1">
                    </div>
                    <button id="testWorkflowBtn" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Run Workflow Test
                    </button>
                </div>
                <div id="workflowResult" class="mt-3 hidden">
                    <div class="bg-green-50 border-l-4 border-green-400 p-4">
                        <h5 class="font-medium text-green-800">Workflow Test Completed</h5>
                        <p id="workflowMessage" class="text-green-700"></p>
                        <div id="workflowSteps" class="mt-2"></div>
                        <div id="notificationsCreated" class="mt-3">
                            <h6 class="font-medium text-green-800">Notifications Created:</h6>
                            <div id="notificationsList"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mb-8">
                <h4 class="text-lg font-medium mb-3">3. Run Rejection Workflow Test</h4>
                <div class="flex flex-col sm:flex-row gap-2 mb-3 max-w-2xl">
                    <div class="flex-grow flex rounded-md shadow-sm">
                        <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                            Project ID:
                        </span>
                        <input type="text" id="rejectionProjectIdInput" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter the Project ID from step 1">
                    </div>
                    <button id="testRejectionBtn" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Run Rejection Test
                    </button>
                </div>
                <div id="rejectionResult" class="mt-3 hidden">
                    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                        <h5 class="font-medium text-yellow-800">Rejection Workflow Test Completed</h5>
                        <p id="rejectionMessage" class="text-yellow-700"></p>
                        <div id="rejectionSteps" class="mt-2"></div>
                        <div id="rejectionNotifications" class="mt-3">
                            <h6 class="font-medium text-yellow-800">Notifications Created:</h6>
                            <div id="rejectionNotificationsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Setup Test Environment
            document.getElementById('setupTestBtn').addEventListener('click', async function() {
                try {
                    const response = await fetch('/api/test/workflow/setup');
                    const data = await response.json();
                    
                    if (data.success) {
                        // Show result
                        document.getElementById('setupResult').classList.remove('hidden');
                        document.getElementById('setupMessage').textContent = data.message;
                        
                        // Format test data
                        const testDataHtml = `
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <tr>
                                        <th class="px-3 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project ID</th>
                                        <td class="px-3 py-2 whitespace-nowrap"><code class="bg-gray-100 px-1 py-0.5 rounded">${data.testData.projectId}</code></td>
                                    </tr>
                                    <tr>
                                        <th class="px-3 py-2 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project Manager</th>
                                        <td class="px-3 py-2 whitespace-nowrap">${data.testData.projectManagerUsername}</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="mt-3">
                                <strong class="text-gray-700">Next Steps:</strong>
                                <ul class="list-disc list-inside space-y-1 pl-4 mt-1 text-sm text-gray-600">
                                    ${data.nextSteps.map(step => `<li>${step}</li>`).join('')}
                                </ul>
                            </div>
                        `;
                        document.getElementById('setupData').innerHTML = testDataHtml;
                        
                        // Auto-fill project IDs
                        document.getElementById('projectIdInput').value = data.testData.projectId;
                        document.getElementById('rejectionProjectIdInput').value = data.testData.projectId;
                    } else {
                        alert('Error: ' + data.message);
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            });
            
            // Run Complete Workflow Test
            document.getElementById('testWorkflowBtn').addEventListener('click', async function() {
                const projectId = document.getElementById('projectIdInput').value;
                if (!projectId) {
                    alert('Please enter a Project ID');
                    return;
                }
                
                try {
                    const response = await fetch(`/api/test/workflow/test-workflow/${projectId}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        // Show result
                        document.getElementById('workflowResult').classList.remove('hidden');
                        document.getElementById('workflowMessage').textContent = data.message;
                        
                        // Format workflow steps
                        const stepsHtml = `
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Step</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        ${data.workflows.map(step => `
                                            <tr>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-700">${step.step}</td>
                                                <td class="px-3 py-2 whitespace-nowrap"><span class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">${step.status}</span></td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                        document.getElementById('workflowSteps').innerHTML = stepsHtml;
                        
                        // Format notifications
                        const notificationsHtml = `
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipient</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        ${data.notifications.map(notification => `
                                            <tr>
                                                <td class="px-3 py-2 text-sm text-gray-700">${notification.Message}</td>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm"><code class="bg-gray-100 px-1 py-0.5 rounded">${notification.Recipient}</code></td>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-700">${new Date(notification.Created).toLocaleString()}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                        document.getElementById('notificationsList').innerHTML = notificationsHtml;
                    } else {
                        alert('Error: ' + data.message);
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            });
            
            // Run Rejection Workflow Test
            document.getElementById('testRejectionBtn').addEventListener('click', async function() {
                const projectId = document.getElementById('rejectionProjectIdInput').value;
                if (!projectId) {
                    alert('Please enter a Project ID');
                    return;
                }
                
                try {
                    const response = await fetch(`/api/test/workflow/test-workflow-rejection/${projectId}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        // Show result
                        document.getElementById('rejectionResult').classList.remove('hidden');
                        document.getElementById('rejectionMessage').textContent = data.message;
                        
                        // Format workflow steps
                        const stepsHtml = `
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Step</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        ${data.workflows.map(step => `
                                            <tr>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-700">${step.step}</td>
                                                <td class="px-3 py-2 whitespace-nowrap"><span class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">${step.status}</span></td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                        document.getElementById('rejectionSteps').innerHTML = stepsHtml;
                        
                        // Format notifications
                        const notificationsHtml = `
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipient</th>
                                            <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        ${data.notifications.map(notification => `
                                            <tr>
                                                <td class="px-3 py-2 text-sm text-gray-700">${notification.Message}</td>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm"><code class="bg-gray-100 px-1 py-0.5 rounded">${notification.Recipient}</code></td>
                                                <td class="px-3 py-2 whitespace-nowrap text-sm text-gray-700">${new Date(notification.Created).toLocaleString()}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                        document.getElementById('rejectionNotificationsList').innerHTML = notificationsHtml;
                    } else {
                        alert('Error: ' + data.message);
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            });
        });
    </script>
}