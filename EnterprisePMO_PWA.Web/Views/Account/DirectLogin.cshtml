@{
    ViewData["Title"] = "Direct Login";
    Layout = "~/Views/Shared/_TailwindLayout.cshtml";
}

<div class="max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 mt-10">
    <h2 class="text-2xl font-bold mb-6 text-center">Development Login</h2>
    
    <div id="loginError" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
        <p class="font-bold">Error</p>
        <p id="loginErrorMessage">Login error details will appear here.</p>
    </div>
    
    <form id="directLoginForm" method="post">
        <input type="hidden" id="email" name="email" value="admin@test.com">
        <input type="hidden" id="password" name="password" value="Password123!">
        
        <div class="flex items-center justify-between">
            <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                Login as Admin (Development Only)
            </button>
        </div>
    </form>
    
    <div class="mt-6 text-center">
        <p class="text-sm text-gray-600">
            This direct login uses hardcoded credentials for testing purposes.<br>
            Email: admin@test.com<br>
            Password: Password123!
        </p>
    </div>

    <div class="mt-8 pt-6 border-t border-gray-200">
        <h3 class="text-lg font-semibold mb-4">Login Status</h3>
        <div id="loginStatus" class="text-sm">
            Not logged in
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DirectLogin page loaded");
        
        // Check for an existing token
        const existingToken = localStorage.getItem('token');
        if (existingToken) {
            updateLoginStatus("Already logged in - token found in localStorage");
        }
        
        const loginForm = document.getElementById('directLoginForm');
        
        if (loginForm) {
            console.log("Login form found - adding event listener");
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                updateLoginStatus("Submitting login request...");
                
                const errorDiv = document.getElementById('loginError');
                const errorMessage = document.getElementById('loginErrorMessage');
                
                // Hide any previous errors
                errorDiv.classList.add('hidden');
                
                console.log("Submitting direct login request");
                // Call direct-login API
                fetch('/api/auth/direct-login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: "admin@test.com",
                        password: "Password123!",
                        rememberMe: true
                    })
                })
                .then(response => {
                    console.log("Login response received", response);
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || 'Login failed');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Login successful, saving token", data);
                    updateLoginStatus("Login successful! Setting up auth...");
                    
                    // Store token and user info
                    const token = data.token;
                    localStorage.setItem('token', token);
                    localStorage.setItem('refreshToken', data.refreshToken);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    
                    // Set up automatic inclusion of the token in all future requests
                    console.log("Setting up Authorization header for future requests");
                    setupAuthHeader(token);
                    
                    // Test the auth endpoint
                    testAuth(token)
                        .then(authResult => {
                            console.log("Auth test successful:", authResult);
                            updateLoginStatus("Authentication verified! Redirecting...");
                            
                            // Redirect to test page first to check routing
                            setTimeout(() => {
                                window.location.href = '/Test';
                            }, 1000);
                        })
                        .catch(error => {
                            console.error("Auth test failed:", error);
                            updateLoginStatus("Warning: Auth test failed, but redirecting anyway...");
                            
                            // Still redirect even if auth test fails
                            setTimeout(() => {
                                window.location.href = '/Test';
                            }, 1000);
                        });
                })
                .catch(error => {
                    console.error('Login error:', error);
                    // Show error message
                    errorDiv.classList.remove('hidden');
                    errorMessage.textContent = error.message || 'An error occurred during login';
                    updateLoginStatus("Login failed: " + error.message);
                });
            });
        } else {
            console.warn('Direct login form not found in the DOM');
            updateLoginStatus("Error: Login form not found in DOM");
        }
        
        // Function to update the login status display
        function updateLoginStatus(message) {
            const statusDiv = document.getElementById('loginStatus');
            if (statusDiv) {
                statusDiv.textContent = message;
            }
        }
        
        // Function to set up the auth header for all future requests
        function setupAuthHeader(token) {
            // Create a proxy for the fetch function that automatically adds the auth header
            const originalFetch = window.fetch;
            window.fetch = function(url, options = {}) {
                // Clone the options object to avoid modifying the original
                const newOptions = { ...options };
                
                // Initialize headers if not present
                newOptions.headers = newOptions.headers || {};
                
                // Set Authorization header if not already present
                if (!newOptions.headers.Authorization && !newOptions.headers.authorization) {
                    console.log(`Adding Authorization header to fetch request to ${url}`);
                    newOptions.headers.Authorization = `Bearer ${token}`;
                }
                
                // Call the original fetch with the updated options
                return originalFetch(url, newOptions);
            };
            
            // Also modify XMLHttpRequest to add the auth header
            const originalXHROpen = XMLHttpRequest.prototype.open;
            XMLHttpRequest.prototype.open = function() {
                this.addEventListener('readystatechange', function() {
                    if (this.readyState === 1) { // OPENED
                        if (!this.getRequestHeader('Authorization')) {
                            this.setRequestHeader('Authorization', `Bearer ${token}`);
                        }
                    }
                });
                originalXHROpen.apply(this, arguments);
            };
            
            // Add helper method to check if header exists
            XMLHttpRequest.prototype.getRequestHeader = function(name) {
                return this.requestHeaders ? this.requestHeaders[name.toLowerCase()] : null;
            };
        }
        
        // Function to test the auth endpoint
        function testAuth(token) {// Function to test the auth endpoint
        function testAuth(token) {
            return new Promise((resolve, reject) => {
                fetch('/api/auth/test-auth', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Auth test successful:", data);
                    resolve(data);
                })
                .catch(error => {
                    console.error("Auth test failed:", error);
                    reject(error);
                });
            });
        }
    });
</script>
}