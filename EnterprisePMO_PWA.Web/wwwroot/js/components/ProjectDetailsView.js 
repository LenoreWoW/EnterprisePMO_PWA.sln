import React, { useState, useEffect } from 'react';
import { CalendarDays, FileText, BarChart2, Trello, Users, Clock, Clipboard, AlertCircle } from 'lucide-react';
import ProjectGanttChart from './ProjectGanttChart';
import ProjectApprovalWorkflow from './ProjectApprovalWorkflow';

const ProjectDetailsView = ({ projectId, userRole }) => {
  const [project, setProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [teamMembers, setTeamMembers] = useState([]);
  const [changeRequests, setChangeRequests] = useState([]);

  useEffect(() => {
    // Fetch project details
    const fetchProjectData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/projects/${projectId}`);
        if (!response.ok) {
          throw new Error('Failed to fetch project details');
        }
        const data = await response.json();
        setProject(data);
        
        // Fetch team members
        const teamResponse = await fetch(`/api/projects/${projectId}/members`);
        if (teamResponse.ok) {
          const teamData = await teamResponse.json();
          setTeamMembers(teamData);
        }
        
        // Fetch change requests
        const crResponse = await fetch(`/api/projects/${projectId}/changerequests`);
        if (crResponse.ok) {
          const crData = await crResponse.json();
          setChangeRequests(crData);
        }
      } catch (err) {
        console.error('Error fetching project data:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    if (projectId) {
      fetchProjectData();
    }
  }, [projectId]);

  // Format a date string
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    });
  };

  // Format currency
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', { 
      style: 'currency', 
      currency: 'USD',
      maximumFractionDigits: 0 
    }).format(value);
  };

  // Get status badge color
  const getStatusBadge = (status) => {
    switch(status) {
      case 'Active':
        return 'bg-green-100 text-green-800';
      case 'Proposed':
        return 'bg-blue-100 text-blue-800';
      case 'Completed':
        return 'bg-purple-100 text-purple-800';
      case 'Rejected':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
        <div className="flex">
          <div className="flex-shrink-0">
            <AlertCircle className="h-5 w-5 text-red-500" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">
              Error loading project details: {error}
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (!project) {
    return (
      <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
        <div className="flex">
          <div className="flex-shrink-0">
            <AlertCircle className="h-5 w-5 text-yellow-500" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-yellow-700">
              Project not found. It may have been deleted or you don't have permission to view it.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Project header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">{project.name}</h1>
              <div className="mt-1 flex flex-wrap items-center text-sm text-gray-500">
                <span className="mr-4">ID: {project.id.substring(0, 8)}...</span>
                <span className="mr-4">Department: {project.department?.name || 'N/A'}</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(project.status)}`}>
                  {project.status}
                </span>
              </div>
            </div>
            <div className="mt-4 md:mt-0 flex space-x-3">
              {userRole === 'ProjectManager' && project.status !== 'Completed' && (
                <button className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  <FileText className="h-4 w-4 mr-2" />
                  Edit Project
                </button>
              )}
              {project.status === 'Active' && userRole === 'ProjectManager' && (
                <button className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                  <Clipboard className="h-4 w-4 mr-2" />
                  Add Weekly Update
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Navigation tabs */}
      <div className="border-b border-gray-200 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="-mb-px flex space-x-8">
            <button
              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'overview'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('overview')}
            >
              Overview
            </button>
            <button
              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'timeline'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('timeline')}
            >
              Timeline
            </button>
            <button
              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'team'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('team')}
            >
              Team
            </button>
            <button
              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'changes'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('changes')}
            >
              Change Requests
            </button>
            <button
              className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'workflow'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('workflow')}
            >
              Approval Workflow
            </button>
          </nav>
        </div>
      </div>

      {/* Tab content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Overview tab */}
        {activeTab === 'overview' && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Project details card */}
            <div className="md:col-span-2 bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:px-6">
                <h3 className="text-lg font-medium leading-6 text-gray-900">Project Details</h3>
              </div>
              <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                <dl className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-6">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Description</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.description || 'No description provided'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Category</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.category || 'Uncategorized'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Start Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">{formatDate(project.startDate)}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">End Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">{formatDate(project.endDate)}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Project Manager</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.projectManager?.username || 'Unassigned'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Client</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.clientName || 'Internal'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Strategic Goal</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.strategicGoal?.name || 'Not aligned'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Annual Goal</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.annualGoal?.name || 'Not aligned'}</dd>
                  </div>
                </dl>
              </div>
            </div>

            {/* Financial info card */}
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:px-6">
                <h3 className="text-lg font-medium leading-6 text-gray-900">Financial Summary</h3>
              </div>
              <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                <dl className="space-y-4">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Approved Budget</dt>
                    <dd className="mt-1 text-2xl font-semibold text-gray-900">{formatCurrency(project.budget)}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Actual Cost</dt>
                    <dd className="mt-1 text-xl font-medium text-gray-900">{formatCurrency(project.actualCost)}</dd>
                    <dd className="mt-1 text-sm text-gray-500">
                      {Math.round((project.actualCost / project.budget) * 100)}% of budget spent
                    </dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Estimated Total</dt>
                    <dd className="mt-1 text-xl font-medium text-gray-900">{formatCurrency(project.estimatedCost)}</dd>
                    <dd className={`mt-1 text-sm ${project.estimatedCost > project.budget ? 'text-red-500' : 'text-green-500'}`}>
                      {project.estimatedCost > project.budget 
                        ? `${formatCurrency(project.estimatedCost - project.budget)} over budget` 
                        : `${formatCurrency(project.budget - project.estimatedCost)} under budget`}
                    </dd>
                  </div>
                </dl>
              </div>
            </div>

            {/* Key dates card */}
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:px-6">
                <h3 className="text-lg font-medium leading-6 text-gray-900">Key Dates</h3>
              </div>
              <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                <dl className="space-y-4">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Creation Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">{formatDate(project.creationDate)}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Approval Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">{project.approvedDate ? formatDate(project.approvedDate) : 'Not yet approved'}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Last Updated</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {/* This would need to be added to the project data */}
                      {formatDate(project.lastUpdated || new Date().toISOString())}
                    </dd>
                  </div>
                </dl>
              </div>
            </div>

            {/* Weekly Updates summary card */}
            <div className="md:col-span-2 bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                <h3 className="text-lg font-medium leading-6 text-gray-900">Latest Updates</h3>
                {userRole === 'ProjectManager' && project.status === 'Active' && (
                  <button className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    See All Updates
                  </button>
                )}
              </div>
              <div className="border-t border-gray-200 px-4 py-5 sm:p-6">
                {project.weeklyUpdates && project.weeklyUpdates.length > 0 ? (
                  <ul className="divide-y divide-gray-200">
                    {project.weeklyUpdates.slice(0, 3).map((update) => (
                      <li key={update.id} className="py-4">
                        <div className="flex space-x-3">
                          <div className="flex-1 space-y-1">
                            <div className="flex items-center justify-between">
                              <h3 className="text-sm font-medium">Week ending {formatDate(update.weekEndingDate)}</h3>
                              <p className={`text-sm ${update.isApprovedBySubPMO ? 'text-green-600' : update.isSentBack ? 'text-red-600' : 'text-yellow-600'}`}>
                                {update.isApprovedBySubPMO ? 'Approved' : update.isSentBack ? 'Needs revision' : 'Pending approval'}
                              </p>
                            </div>
                            <p className="text-sm text-gray-500">
                              {update.accomplishments.substring(0, 150)}
                              {update.accomplishments.length > 150 ? '...' : ''}
                            </p>
                            <div className="mt-2">
                              <div className="flex items-center">
                                <span className="text-sm font-medium text-gray-900">{update.percentComplete}%</span>
                                <div className="ml-2 w-full bg-gray-200 rounded-full h-2.5">
                                  <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${update.percentComplete}%` }}></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-sm text-gray-500 italic">No weekly updates have been submitted yet.</p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Timeline tab */}
        {activeTab === 'timeline' && (
          <div>
            <ProjectGanttChart projectId={projectId} />
          </div>
        )}

        {/* Team tab */}
        {activeTab === 'team' && (
          <div>
            <div className="bg-white shadow overflow-hidden sm:rounded-md">
              <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                <h3 className="text-lg leading-6 font-medium text-gray-900">Project Team Members</h3>
                {userRole === 'ProjectManager' && (
                  <button className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <Users className="h-4 w-4 mr-2" />
                    Add Team Member
                  </button>
                )}
              </div>
              <ul className="divide-y divide-gray-200">
                {teamMembers.length > 0 ? (
                  teamMembers.map((member) => (
                    <li key={member.id}>
                      <div className="px-4 py-4 sm:px-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                              {member.user?.username.charAt(0).toUpperCase() || 'U'}
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900">{member.user?.username || 'Unknown User'}</div>
                              <div className="text-sm text-gray-500">{member.role?.roleName || 'No role assigned'}</div>
                            </div>
                          </div>
                          {userRole === 'ProjectManager' && (
                            <div className="ml-2 flex-shrink-0 flex">
                              <button className="p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <span className="sr-only">View details</span>
                                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                              </button>
                            </div>
                          </div>
                          <div className="mt-2 text-sm text-gray-700">
                            <p>{cr.justification.substring(0, 150)}{cr.justification.length > 150 ? '...' : ''}</p>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="px-4 py-5 sm:px-6">
                    <p className="text-sm text-gray-500 italic">No change requests have been submitted for this project.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Approval Workflow tab */}
        {activeTab === 'workflow' && (
          <div>
            <ProjectApprovalWorkflow 
              projectId={projectId} 
              projectStatus={project.status} 
              userRole={userRole} 
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectDetailsView;Edit</span>
                                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                </svg>
                              </button>
                              <button className="ml-2 p-1 rounded-full text-gray-400 hover:text-red-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                <span className="sr-only">Remove</span>
                                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </li>
                  ))
                ) : (
                  <li className="px-4 py-5 sm:px-6">
                    <p className="text-sm text-gray-500 italic">No team members have been assigned to this project yet.</p>
                  </li>
                )}
              </ul>
            </div>
          </div>
        )}

        {/* Change Requests tab */}
        {activeTab === 'changes' && (
          <div>
            <div className="bg-white shadow overflow-hidden sm:rounded-md">
              <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                <h3 className="text-lg leading-6 font-medium text-gray-900">Change Requests</h3>
                {userRole === 'ProjectManager' && project.status === 'Active' && (
                  <button className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <FileText className="h-4 w-4 mr-2" />
                    New Change Request
                  </button>
                )}
              </div>
              <div className="border-t border-gray-200">
                {changeRequests.length > 0 ? (
                  <ul className="divide-y divide-gray-200">
                    {changeRequests.map((cr) => (
                      <li key={cr.id}>
                        <div className="px-4 py-4 sm:px-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <div className="flex items-center">
                                <p className="text-sm font-medium text-blue-600 truncate">{cr.changeType} Change</p>
                                <p className={`ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                  cr.approvalStatus === 'MainPMOApproved' ? 'bg-green-100 text-green-800' :
                                  cr.approvalStatus === 'Rejected' ? 'bg-red-100 text-red-800' :
                                  cr.approvalStatus === 'SubPMOApproved' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  {cr.approvalStatus === 'MainPMOApproved' ? 'Approved' :
                                   cr.approvalStatus === 'Rejected' ? 'Rejected' :
                                   cr.approvalStatus === 'SubPMOApproved' ? 'Sub PMO Approved' :
                                   'Proposed'}
                                </p>
                              </div>
                              <div className="mt-1 text-sm text-gray-600">
                                Requested on <time dateTime={cr.requestDate}>{formatDate(cr.requestDate)}</time>
                              </div>
                            </div>
                            <div className="ml-2 flex-shrink-0 flex">
                              <button className="p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <span className="sr-only">