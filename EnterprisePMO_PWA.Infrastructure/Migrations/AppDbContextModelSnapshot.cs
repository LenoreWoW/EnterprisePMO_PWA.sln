// <auto-generated />
using System;
using EnterprisePMO_PWA.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnterprisePMO_PWA.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.AnnualGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StrategicGoalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StrategicGoalId");

                    b.ToTable("AnnualGoals");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.ChangeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImpactAnalysis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("MainPMOApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SubPMOApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("ChangeRequests");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploadedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("AnnualGoalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusColor")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StrategicGoalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnnualGoalId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("StrategicGoalId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.StrategicGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StrategicGoals");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.WeeklyUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Accomplishments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApprovedBySubPMO")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSentBack")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuesOrRisks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NextSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PercentComplete")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusColor")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubmittedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WeekEndingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("WeeklyUpdates");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.AnnualGoal", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.StrategicGoal", "StrategicGoal")
                        .WithMany()
                        .HasForeignKey("StrategicGoalId");

                    b.Navigation("StrategicGoal");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.ChangeRequest", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Project", "Project")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Document", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Project", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.AnnualGoal", "AnnualGoal")
                        .WithMany()
                        .HasForeignKey("AnnualGoalId");

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.StrategicGoal", "StrategicGoal")
                        .WithMany()
                        .HasForeignKey("StrategicGoalId");

                    b.Navigation("AnnualGoal");

                    b.Navigation("Department");

                    b.Navigation("ProjectManager");

                    b.Navigation("StrategicGoal");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Role", "Role")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.User", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.WeeklyUpdate", b =>
                {
                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.Project", "Project")
                        .WithMany("WeeklyUpdates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnterprisePMO_PWA.Domain.Entities.User", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Department", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Project", b =>
                {
                    b.Navigation("ChangeRequests");

                    b.Navigation("Documents");

                    b.Navigation("Members");

                    b.Navigation("WeeklyUpdates");
                });

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.Role", b =>
                {
                    b.Navigation("ProjectMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
