// <auto-generated />
using System;
using EnterprisePMO_PWA.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EnterprisePMO_PWA.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250401132900_AddSupabaseIntegration")]
    partial class AddSupabaseIntegration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.AuditLog", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Action")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("ChangeSummary")
                    .HasColumnType("text");

                b.Property<string>("EntityId")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("EntityName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("IpAddress")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)");

                b.Property<DateTime>("Timestamp")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid?>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("Username")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.HasKey("Id");

                b.HasIndex("EntityId");

                b.HasIndex("EntityName");

                b.HasIndex("Timestamp");

                b.HasIndex("UserId");

                b.ToTable("AuditLogs");
            });

            // Skipping other entity configurations...

            modelBuilder.Entity("EnterprisePMO_PWA.Domain.Entities.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid?>("DepartmentId")
                    .HasColumnType("uuid");

                b.Property<string>("Email")
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<string>("FirstName")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<bool>("IsActive")
                    .HasColumnType("boolean");

                b.Property<string>("LastName")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<DateTime?>("LastUpdated")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Role")
                    .HasColumnType("integer");

                b.Property<string>("SupabaseId")
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)");

                b.HasKey("Id");

                b.HasIndex("DepartmentId");

                b.HasIndex("SupabaseId");

                b.HasIndex("Username")
                    .IsUnique();

                b.ToTable("Users");
            });

            // Foreign key relationships...
        }
    }
}